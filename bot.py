import gspread
import asyncio
import logging
import traceback
import html
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    JobQueue
)
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta
from time import sleep

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SPREADSHEET_ID = "1oPXXHOzbAYlPZlgKOo8XFKkhaZl20KOP-zXDYL5r1w4"
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
ADMIN_ID = 5889636341

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
(
    NAME, TRACK, PRICE_CNY, WEIGHT,
    PRICE_SHIPPING, PACKAGE, STATUS
) = range(7)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
(
    WAITING_FOR_CNY_RATE,
    WAITING_FOR_USD_RATE,
    WAITING_FOR_RATIO,
    WAITING_FOR_DELIVERY_RATE
) = range(7, 11)

# –ö–µ—à –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
params_cache = {}
last_updated = None
CACHE_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
try:
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", SCOPE)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–õ–∏—Å—Ç1")
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    raise

def refresh_parameters(force=False):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    global params_cache, last_updated
    try:
        if force or (last_updated is None) or (datetime.now() - last_updated > timedelta(seconds=CACHE_TIMEOUT)):
            values = sheet.batch_get(["B2", "B3", "B4", "B5"])
            
            def parse_value(cell_value):
                if cell_value and isinstance(cell_value, str):
                    return float(cell_value.replace(',', '.'))
                return 0.0

            new_params = {
                "cny_rate": parse_value(values[0][0][0]) if values[0] and values[0][0] else 0.0,
                "usd_rate": parse_value(values[1][0][0]) if values[1] and values[1][0] else 0.0,
                "jpy_to_usd_ratio": parse_value(values[2][0][0]) if values[2] and values[2][0] else 0.0,
                "delivery_rate": parse_value(values[3][0][0]) if values[3] and values[3][0] else 0.0,
                "last_modified": datetime.now().isoformat()
            }
            
            if new_params != params_cache:
                logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                params_cache = new_params
                last_updated = datetime.now()
            
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
        return False

def get_parameters():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    refresh_parameters(force=True)
    return params_cache.copy()

def save_parameters(new_params):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É"""
    global params_cache
    max_retries = 3
    current_params = get_parameters()
    
    if new_params != current_params:
        try:
            for attempt in range(max_retries):
                try:
                    sheet.batch_update([
                        {'range': 'B2', 'values': [[new_params['cny_rate']]]},
                        {'range': 'B3', 'values': [[new_params['usd_rate']]]},
                        {'range': 'B4', 'values': [[new_params['jpy_to_usd_ratio']]]},
                        {'range': 'B5', 'values': [[new_params['delivery_rate']]]}
                    ])
                    logger.debug("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                    refresh_parameters(force=True)
                    return True
                except gspread.exceptions.APIError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                    sleep(5)
            return False
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    return True

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def background_check(context: CallbackContext):
    if refresh_parameters():
        logger.info("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")

def main_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä üõí"), KeyboardButton("–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã üì¶")],
            [KeyboardButton("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")]  # –£–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–º–æ—â—å ‚ùì"
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

def parameters_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"), KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")],
            [KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üèç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ China Moto!",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext):
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

async def add_item_start(update: Update, context: CallbackContext):
    context.user_data.clear()
    await update.message.reply_text(
        "üèç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå")]], resize_keyboard=True)
    )
    return NAME

async def save_name(update: Update, context: CallbackContext):
    if update.message.text == "–û—Ç–º–µ–Ω–∞ ‚ùå":
        return await cancel(update, context)
    
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        "üì¶ –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå")]], resize_keyboard=True)
    )
    return TRACK

async def save_track(update: Update, context: CallbackContext):
    if update.message.text == "–û—Ç–º–µ–Ω–∞ ‚ùå":
        return await cancel(update, context)
    
    context.user_data['track'] = update.message.text
    await update.message.reply_text(
        "üí¥ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ ¬•:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå")]], resize_keyboard=True)
    )
    return PRICE_CNY

async def save_price_cny(update: Update, context: CallbackContext):
    if update.message.text == "–û—Ç–º–µ–Ω–∞ ‚ùå":
        return await cancel(update, context)
    
    try:
        params = get_parameters()
        context.user_data['price_cny'] = float(update.message.text.replace(',', '.'))
        context.user_data['price_byn'] = context.user_data['price_cny'] * params['cny_rate']
        await update.message.reply_text(
            "‚öñ –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå")]], resize_keyboard=True)
    )
        return WEIGHT
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return PRICE_CNY

async def save_weight(update: Update, context: CallbackContext):
    if update.message.text == "–û—Ç–º–µ–Ω–∞ ‚ùå":
        return await cancel(update, context)
    
    try:
        context.user_data['weight'] = float(update.message.text.replace(',', '.'))
        await update.message.reply_text(
            "üöö –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–≥ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ $:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå")]], resize_keyboard=True)
        )
        return PRICE_SHIPPING
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return WEIGHT

async def save_shipping(update: Update, context: CallbackContext):
    if update.message.text == "–û—Ç–º–µ–Ω–∞ ‚ùå":
        return await cancel(update, context)
    
    try:
        params = get_parameters()
        context.user_data['shipping_per_kg'] = float(update.message.text.replace(',', '.'))
        shipping_cost = (context.user_data['shipping_per_kg'] + params['delivery_rate']) * context.user_data['weight']
        context.user_data['shipping'] = shipping_cost  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ $
        
        await update.message.reply_text(
            "üì¶ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É–ø–∞–∫–æ–≤–∫–∏:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå")]], resize_keyboard=True)
        )
        return PACKAGE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return PRICE_SHIPPING

async def save_package(update: Update, context: CallbackContext):
    if update.message.text == "–û—Ç–º–µ–Ω–∞ ‚ùå":
        return await cancel(update, context)
    
    try:
        params = get_parameters()
        context.user_data['package'] = float(update.message.text.replace(',', '.'))
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π
        shipping_total_usd = context.user_data['shipping']
        shipping_total_rub = shipping_total_usd * params['usd_rate']
        total_rub = (
            context.user_data['price_byn'] + 
            shipping_total_rub + 
            context.user_data['package']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ user_data
        context.user_data['shipping_total_usd'] = shipping_total_usd
        context.user_data['shipping_total_rub'] = shipping_total_rub
        context.user_data['total_rub'] = total_rub
        context.user_data['total_usd'] = total_rub / params['usd_rate']
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–ª—É—á–µ–Ω ‚úÖ", callback_data='received'),
             InlineKeyboardButton("–ù–µ –ø–æ–ª—É—á–µ–Ω ‚ùå", callback_data='not_received')],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ])
        
        await update.message.reply_text(
            "üìå –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
            reply_markup=keyboard
        )
        return STATUS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞")
        return await cancel(update, context)

async def save_status(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'main_menu':
        return await main_menu(update, context)
    
    status = "–ü–æ–ª—É—á–µ–Ω" if query.data == 'received' else "–ù–µ –ø–æ–ª—É—á–µ–Ω"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    row = [
        context.user_data['name'],                      # –ù–∞–∑–≤–∞–Ω–∏–µ
        context.user_data['track'],                    # –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä
        context.user_data['price_cny'],                # –¶–µ–Ω–∞ –≤ –ö–∏—Ç–∞–µ (¬•)
        context.user_data['price_byn'],                # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
        context.user_data['weight'],                   # –í–µ—Å
        context.user_data['shipping_per_kg'],          # –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ –∫–≥ ($)
        context.user_data['shipping_total_usd'],       # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ ($)
        context.user_data['total_rub'],                # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)
        context.user_data['total_usd'],                # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ($)
        context.user_data['package'],                  # –£–ø–∞–∫–æ–≤–∫–∞
        status                                         # –°—Ç–∞—Ç—É—Å
    ]
    
    try:
        sheet.append_row(row)
        await query.edit_message_text("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É")
    finally:
        context.user_data.clear()
    return ConversationHandler.END

VIEW_ITEM = 11

async def show_items(update: Update, context: CallbackContext):
    try:
        sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–õ–∏—Å—Ç1")
        data = sheet.get_values("A7:B")  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç—Ä–µ–∫ –Ω–∞—á–∏–Ω–∞—è —Å A7
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
        items_list = []
        for idx, row in enumerate(data):
            if any(field.strip() for field in row):
                items_list.append({
                    'row_num': idx + 7,  # –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7)
                    'name': row[0] if len(row) > 0 else '',
                    'track': row[1] if len(row) > 1 else ''
                })
        
        if not items_list:
            await update.message.reply_text(
                "üì≠ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç",
                reply_markup=main_keyboard()
            )
            return ConversationHandler.END

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 50 —Ç–æ–≤–∞—Ä–æ–≤
        chunk_size = 50
        total_items = len(items_list)
        
        for i in range(0, total_items, chunk_size):
            chunk = items_list[i:i + chunk_size]
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            message_text = "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n" + "\n".join(
                f"{idx+1+i}. {item['name']} - –¢—Ä–µ–∫: {item['track']}"
                for idx, item in enumerate(chunk)
            )
            
            await update.message.reply_text(
                message_text,
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                    resize_keyboard=True
                )
            )

        await update.message.reply_text(
            f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                resize_keyboard=True
            )
        )
        
        context.user_data['items_list'] = items_list
        return VIEW_ITEM

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=main_keyboard()
        )
        return ConversationHandler.END


async def view_item_details(update: Update, context: CallbackContext):
    if update.message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await main_menu(update, context)
    
    try:
        item_number = int(update.message.text)
        items = context.user_data.get('items_list', [])
        
        if 1 <= item_number <= len(items):
            item = items[item_number-1]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            try:
                sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–õ–∏—Å—Ç1")
                # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ (A7 + –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ - 1)
                full_row = sheet.row_values(item['row_num'])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
                response_text = f"üîπ –¢–æ–≤–∞—Ä #{item_number}\n" \
                               f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {item['name']}\n" \
                               f"üìÆ –¢—Ä–µ–∫: {item['track']}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if len(full_row) > 2:
                    response_text += f"üá®üá≥ –¶–µ–Ω–∞: {float(full_row[2].replace(',', '.')):.2f} ¬•\n" \
                                    f"‚ÇΩ –†—É–±–ª–∏: {float(full_row[3].replace(',', '.')):.2f}\n" \
                                    f"‚öñ –í–µ—Å: {float(full_row[4].replace(',', '.')):.2f} –∫–≥\n" \
                                    f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {float(full_row[5].replace(',', '.')):.2f} $\n" \
                                    f"üì¶ –ò—Ç–æ–≥–æ –¥–æ—Å—Ç–∞–≤–∫–∞: {float(full_row[6].replace(',', '.')):.2f} $\n" \
                                    f"üìå –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {float(full_row[7].replace(',', '.')):.2f} ‚ÇΩ\n" \
                                    f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {float(full_row[8].replace(',', '.')):.2f} $\n" \
                                    f"üéÅ –£–ø–∞–∫–æ–≤–∫–∞: {float(full_row[9].replace(',', '.')):.2f} $\n" \
                                    f"üìå –°—Ç–∞—Ç—É—Å: {full_row[10] if len(full_row) > 10 else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
                
                await update.message.reply_text(
                    response_text,
                    reply_markup=main_keyboard()
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞",
                    reply_markup=main_keyboard()
                )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                    resize_keyboard=True
                )
            )
            return VIEW_ITEM
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ —Ü–∏—Ñ—Ä–∞–º–∏",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                resize_keyboard=True
            )
        )
        return VIEW_ITEM
    
    return ConversationHandler.END

async def main_menu(update: Update, context: CallbackContext):
    context.user_data.clear()
    
    if update.callback_query is not None:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_keyboard()
        )
    elif update.message is not None:
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_keyboard()
        )
    else:
        logger.warning("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø update: %s", update)
        
    return ConversationHandler.END

async def show_parameters(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    try:
        params = get_parameters()
        text = (
            "üìå –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n"
            f"‚Ä¢ –ö—É—Ä—Å ¬•: {params['cny_rate']} RUB\n"
            f"‚Ä¢ –ö—É—Ä—Å $: {params['usd_rate']} RUB\n"
            f"‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ ¬•/$: {params['jpy_to_usd_ratio']}\n"
            f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ú–∏–Ω—Å–∫: {params['delivery_rate']} $\n"
            f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated.strftime('%H:%M:%S') if last_updated else 'N/A'}"
        )
        await update.message.reply_text(text, reply_markup=parameters_keyboard())
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", reply_markup=main_keyboard())

async def parameters_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    await update.message.reply_text(
        "‚öôÔ∏è –ú–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:",
        reply_markup=parameters_keyboard()
    )

async def settings_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    try:
        params = get_parameters()
        inline_keyboard = [
            [InlineKeyboardButton(f"–ö—É—Ä—Å ¬• ({params['cny_rate']} RUB)", callback_data="set_cny")],
            [InlineKeyboardButton(f"–ö—É—Ä—Å $ ({params['usd_rate']} RUB)", callback_data="set_usd")],
            [InlineKeyboardButton(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ ¬•/$ ({params['jpy_to_usd_ratio']})", callback_data="set_ratio")],
            [InlineKeyboardButton(f"–î–æ—Å—Ç–∞–≤–∫–∞ ({params['delivery_rate']} $)", callback_data="set_delivery")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é", reply_markup=main_keyboard())

async def settings_button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    try:
        params = get_parameters()
        if query.data == "set_cny":
            context.user_data['state'] = WAITING_FOR_CNY_RATE
            await query.message.reply_text(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å ¬•: {params['cny_rate']} RUB\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            return WAITING_FOR_CNY_RATE
        elif query.data == "set_usd":
            context.user_data['state'] = WAITING_FOR_USD_RATE
            await query.message.reply_text(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å $: {params['usd_rate']} RUB\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            return WAITING_FOR_USD_RATE
        elif query.data == "set_ratio":
            context.user_data['state'] = WAITING_FOR_RATIO
            await query.message.reply_text(f"–¢–µ–∫—É—â–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ ¬•/$: {params['jpy_to_usd_ratio']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            return WAITING_FOR_RATIO
        elif query.data == "set_delivery":
            context.user_data['state'] = WAITING_FOR_DELIVERY_RATE
            await query.message.reply_text(f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {params['delivery_rate']} $\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            return WAITING_FOR_DELIVERY_RATE
        elif query.data == "back":
            await query.delete_message()
            await parameters_menu(update, context)
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞", reply_markup=main_keyboard())
    return ConversationHandler.END

async def handle_parameter_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    text = update.message.text
    state = context.user_data.get('state')

    try:
        value = float(text.replace(',', '.'))
        params = get_parameters()
        if state == WAITING_FOR_CNY_RATE:
            params['cny_rate'] = value
        elif state == WAITING_FOR_USD_RATE:
            params['usd_rate'] = value
        elif state == WAITING_FOR_RATIO:
            params['jpy_to_usd_ratio'] = value
        elif state == WAITING_FOR_DELIVERY_RATE:
            params['delivery_rate'] = value

        if save_parameters(params):
            await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=parameters_keyboard())
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", reply_markup=parameters_keyboard())
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123.45 –∏–ª–∏ 123,45)", reply_markup=parameters_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", reply_markup=main_keyboard())

    context.user_data.clear()
    return ConversationHandler.END

async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if context.user_data.get('state'):
        return

    text = update.message.text
    try:
        if text == "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã":
            await parameters_menu(update, context)
        elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã":
            await settings_menu(update, context)
        elif text == "–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã":
            await show_parameters(update, context)
        elif text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
            await start(update, context)
        elif text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await main_menu(update, context)
        # –£–¥–∞–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å ‚ùì"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

async def error_handler(update: Update, context: CallbackContext):
    logger.error("–û—à–∏–±–∫–∞:", exc_info=context.error)
    tb = "".join(traceback.format_exception(type(context.error), context.error, context.error.__traceback__))
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞:\n<code>{html.escape(tb)}</code>",
        parse_mode="HTML"
    )
    if update.message:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.",
            reply_markup=main_keyboard()
        )

def main():
    application = Application.builder().token("7524666016:AAFTwXVNntSzV-wIRn7NZ9d8DgELsPbdgKA").build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    if application.job_queue:
        application.job_queue.run_repeating(
            background_check,
            interval=300,
            first=10
        )
    else:
        logger.warning("JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    add_item_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r'–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä üõí'), add_item_start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_name)],
            TRACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_track)],
            PRICE_CNY: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_price_cny)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_weight)],
            PRICE_SHIPPING: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_shipping)],
            PACKAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_package)],
            STATUS: [CallbackQueryHandler(save_status)]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.Regex(r'–û—Ç–º–µ–Ω–∞ ‚ùå|–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), main_menu)
        ],
        allow_reentry=True
    )

    # ConversationHandler –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
    view_items_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r'–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã üì¶'), show_items)],
        states={
            VIEW_ITEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, view_item_details)]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.Regex(r'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), main_menu)
        ],
        allow_reentry=True
    )

    # ConversationHandler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    settings_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r'–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'), settings_menu),
            CallbackQueryHandler(settings_button_handler)
        ],
        states={
            WAITING_FOR_CNY_RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_parameter_input)],
            WAITING_FOR_USD_RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_parameter_input)],
            WAITING_FOR_RATIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_parameter_input)],
            WAITING_FOR_DELIVERY_RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_parameter_input)],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.Regex(r'–û—Ç–º–µ–Ω–∞ ‚ùå|‚óÄÔ∏è –ù–∞–∑–∞–¥'), parameters_menu)
        ],
        allow_reentry=True
    )

    application.add_handler(CommandHandler('start', start))
    application.add_handler(add_item_handler)
    application.add_handler(view_items_handler)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(settings_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    application.run_polling()

if __name__ == '__main__':
    main()